using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Upgrades a gift received by the current user. Unless the gift has prepaid_upgrade_star_count &gt; 0, the user must pay gift.upgrade_star_count Telegram Stars for the upgrade
        /// </summary>
        public class UpgradeGift : Function<UpgradeGiftResult>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "upgradeGift";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the user that sent the gift
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sender_user_id")]
            public long SenderUserId { get; set; }

            /// <summary>
            /// Identifier of the message with the gift in the chat with the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// Pass true to keep the original gift text, sender and receiver in the upgraded gift
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("keep_original_details")]
            public bool KeepOriginalDetails { get; set; }
        }

        /// <summary>
        /// Upgrades a gift received by the current user. Unless the gift has prepaid_upgrade_star_count &gt; 0, the user must pay gift.upgrade_star_count Telegram Stars for the upgrade
        /// </summary>
        public static Task<UpgradeGiftResult> UpgradeGiftAsync(
            this Client client, long senderUserId = default, long messageId = default, bool keepOriginalDetails = default)
        {
            return client.ExecuteAsync(new UpgradeGift
            {
                SenderUserId = senderUserId, MessageId = messageId, KeepOriginalDetails = keepOriginalDetails
            });
        }
    }
}
// REUSE-IgnoreEnd