using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Searches specified query by word prefixes in the provided strings. Returns 0-based positions of strings that matched. Can be called synchronously
        /// </summary>
        public class SearchStringsByPrefix : Function<FoundPositions>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "searchStringsByPrefix";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The strings to search in for the query
            /// </summary>
            [JsonProperty("strings", ItemConverterType = typeof(Converter))]
            public string[] Strings { get; set; }

            /// <summary>
            /// Query to search for
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("query")]
            public string Query { get; set; }

            /// <summary>
            /// The maximum number of objects to return
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }

            /// <summary>
            /// Pass true to receive no results for an empty query
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("return_none_for_empty_query")]
            public bool ReturnNoneForEmptyQuery { get; set; }
        }

        /// <summary>
        /// Searches specified query by word prefixes in the provided strings. Returns 0-based positions of strings that matched. Can be called synchronously
        /// </summary>
        public static Task<FoundPositions> SearchStringsByPrefixAsync(
            this Client client, string[] strings = default, string query = default, int limit = default, bool returnNoneForEmptyQuery = default)
        {
            return client.ExecuteAsync(new SearchStringsByPrefix
            {
                Strings = strings, Query = query, Limit = limit, ReturnNoneForEmptyQuery = returnNoneForEmptyQuery
            });
        }
    }
}
// REUSE-IgnoreEnd