using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns the list of boosts applied to a chat; requires administrator rights in the chat
        /// </summary>
        public class GetChatBoosts : Function<FoundChatBoosts>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getChatBoosts";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Pass true to receive only boosts received from gift codes and giveaways created by the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("only_gift_codes")]
            public bool OnlyGiftCodes { get; set; }

            /// <summary>
            /// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset")]
            public string Offset { get; set; }

            /// <summary>
            /// The maximum number of boosts to be returned; up to 100. For optimal performance, the number of returned boosts can be smaller than the specified limit
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }
        }

        /// <summary>
        /// Returns the list of boosts applied to a chat; requires administrator rights in the chat
        /// </summary>
        public static Task<FoundChatBoosts> GetChatBoostsAsync(
            this Client client, long chatId = default, bool onlyGiftCodes = default, string offset = default, int limit = default)
        {
            return client.ExecuteAsync(new GetChatBoosts
            {
                ChatId = chatId, OnlyGiftCodes = onlyGiftCodes, Offset = offset, Limit = limit
            });
        }
    }
}
// REUSE-IgnoreEnd