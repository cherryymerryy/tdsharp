using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Changes the 2-step verification recovery email address of the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed.
        /// If new_recovery_email_address is the same as the email address that is currently set up, this call succeeds immediately and aborts all other requests waiting for an email confirmation
        /// </summary>
        public class SetRecoveryEmailAddress : Function<PasswordState>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "setRecoveryEmailAddress";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The 2-step verification password of the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("password")]
            public string Password { get; set; }

            /// <summary>
            /// New recovery email address
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("new_recovery_email_address")]
            public string NewRecoveryEmailAddress { get; set; }
        }

        /// <summary>
        /// Changes the 2-step verification recovery email address of the user. If a new recovery email address is specified, then the change will not be applied until the new recovery email address is confirmed.
        /// If new_recovery_email_address is the same as the email address that is currently set up, this call succeeds immediately and aborts all other requests waiting for an email confirmation
        /// </summary>
        public static Task<PasswordState> SetRecoveryEmailAddressAsync(
            this Client client, string password = default, string newRecoveryEmailAddress = default)
        {
            return client.ExecuteAsync(new SetRecoveryEmailAddress
            {
                Password = password, NewRecoveryEmailAddress = newRecoveryEmailAddress
            });
        }
    }
}
// REUSE-IgnoreEnd