using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Searches for a given quote in a text. Returns found quote start position in UTF-16 code units. Returns a 404 error if the quote is not found. Can be called synchronously
        /// </summary>
        public class SearchQuote : Function<FoundPosition>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "searchQuote";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Text in which to search for the quote
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("text")]
            public FormattedText Text { get; set; }

            /// <summary>
            /// Quote to search for
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("quote")]
            public FormattedText Quote { get; set; }

            /// <summary>
            /// Approximate quote position in UTF-16 code units
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("quote_position")]
            public int QuotePosition { get; set; }
        }

        /// <summary>
        /// Searches for a given quote in a text. Returns found quote start position in UTF-16 code units. Returns a 404 error if the quote is not found. Can be called synchronously
        /// </summary>
        public static Task<FoundPosition> SearchQuoteAsync(
            this Client client, FormattedText text = default, FormattedText quote = default, int quotePosition = default)
        {
            return client.ExecuteAsync(new SearchQuote
            {
                Text = text, Quote = quote, QuotePosition = quotePosition
            });
        }
    }
}
// REUSE-IgnoreEnd