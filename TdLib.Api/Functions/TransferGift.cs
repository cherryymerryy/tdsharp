using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Sends a gift upgraded by the current user to another user
        /// </summary>
        public class TransferGift : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "transferGift";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the user that sent the gift
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sender_user_id")]
            public long SenderUserId { get; set; }

            /// <summary>
            /// Identifier of the message with the upgraded gift in the chat with the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// Identifier of the user that will receive the gift
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("receiver_user_id")]
            public long ReceiverUserId { get; set; }

            /// <summary>
            /// The amount of Telegram Stars required for the transfer
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("star_count")]
            public long StarCount { get; set; }
        }

        /// <summary>
        /// Sends a gift upgraded by the current user to another user
        /// </summary>
        public static Task<Ok> TransferGiftAsync(
            this Client client, long senderUserId = default, long messageId = default, long receiverUserId = default, long starCount = default)
        {
            return client.ExecuteAsync(new TransferGift
            {
                SenderUserId = senderUserId, MessageId = messageId, ReceiverUserId = receiverUserId, StarCount = starCount
            });
        }
    }
}
// REUSE-IgnoreEnd