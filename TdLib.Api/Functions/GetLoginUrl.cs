using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns an HTTP URL which can be used to automatically authorize the user on a website after clicking an inline button of type inlineKeyboardButtonTypeLoginUrl.
        /// Use the method getLoginUrlInfo to find whether a prior user confirmation is needed. If an error is returned, then the button must be handled as an ordinary URL button
        /// </summary>
        public class GetLoginUrl : Function<HttpUrl>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getLoginUrl";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Chat identifier of the message with the button
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Message identifier of the message with the button
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// Button identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("button_id")]
            public long ButtonId { get; set; }

            /// <summary>
            /// Pass true to allow the bot to send messages to the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("allow_write_access")]
            public bool AllowWriteAccess { get; set; }
        }

        /// <summary>
        /// Returns an HTTP URL which can be used to automatically authorize the user on a website after clicking an inline button of type inlineKeyboardButtonTypeLoginUrl.
        /// Use the method getLoginUrlInfo to find whether a prior user confirmation is needed. If an error is returned, then the button must be handled as an ordinary URL button
        /// </summary>
        public static Task<HttpUrl> GetLoginUrlAsync(
            this Client client, long chatId = default, long messageId = default, long buttonId = default, bool allowWriteAccess = default)
        {
            return client.ExecuteAsync(new GetLoginUrl
            {
                ChatId = chatId, MessageId = messageId, ButtonId = buttonId, AllowWriteAccess = allowWriteAccess
            });
        }
    }
}
// REUSE-IgnoreEnd