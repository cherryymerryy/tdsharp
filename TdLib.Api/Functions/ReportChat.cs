using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if chat.can_be_reported
        /// </summary>
        public class ReportChat : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "reportChat";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Chat identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifiers of reported messages; may be empty to report the whole chat
            /// </summary>
            [JsonProperty("message_ids", ItemConverterType = typeof(Converter))]
            public long[] MessageIds { get; set; }

            /// <summary>
            /// The reason for reporting the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reason")]
            public ReportReason Reason { get; set; }

            /// <summary>
            /// Additional report details; 0-1024 characters
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("text")]
            public string Text { get; set; }
        }

        /// <summary>
        /// Reports a chat to the Telegram moderators. A chat can be reported only from the chat action bar, or if chat.can_be_reported
        /// </summary>
        public static Task<Ok> ReportChatAsync(
            this Client client, long chatId = default, long[] messageIds = default, ReportReason reason = default, string text = default)
        {
            return client.ExecuteAsync(new ReportChat
            {
                ChatId = chatId, MessageIds = messageIds, Reason = reason, Text = text
            });
        }
    }
}