using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns unique emoji that correspond to stickers to be found by the getStickers(sticker_type, query, 1000000, chat_id)
        /// </summary>
        public class GetAllStickerEmojis : Function<Emojis>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getAllStickerEmojis";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Type of the stickers to search for
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sticker_type")]
            public StickerType StickerType { get; set; }

            /// <summary>
            /// Search query
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("query")]
            public string Query { get; set; }

            /// <summary>
            /// Chat identifier for which to find stickers
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Pass true if only main emoji for each found sticker must be included in the result
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("return_only_main_emoji")]
            public bool ReturnOnlyMainEmoji { get; set; }
        }

        /// <summary>
        /// Returns unique emoji that correspond to stickers to be found by the getStickers(sticker_type, query, 1000000, chat_id)
        /// </summary>
        public static Task<Emojis> GetAllStickerEmojisAsync(
            this Client client, StickerType stickerType = default, string query = default, long chatId = default, bool returnOnlyMainEmoji = default)
        {
            return client.ExecuteAsync(new GetAllStickerEmojis
            {
                StickerType = stickerType, Query = query, ChatId = chatId, ReturnOnlyMainEmoji = returnOnlyMainEmoji
            });
        }
    }
}
// REUSE-IgnoreEnd