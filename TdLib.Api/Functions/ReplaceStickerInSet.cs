using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Replaces existing sticker in a set. The function is equivalent to removeStickerFromSet, then addStickerToSet, then setStickerPositionInSet
        /// </summary>
        public class ReplaceStickerInSet : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "replaceStickerInSet";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Sticker set owner; ignored for regular users
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("user_id")]
            public long UserId { get; set; }

            /// <summary>
            /// Sticker set name. The sticker set must be owned by the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("name")]
            public string Name { get; set; }

            /// <summary>
            /// Sticker to remove from the set
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("old_sticker")]
            public InputFile OldSticker { get; set; }

            /// <summary>
            /// Sticker to add to the set
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("new_sticker")]
            public InputSticker NewSticker { get; set; }
        }

        /// <summary>
        /// Replaces existing sticker in a set. The function is equivalent to removeStickerFromSet, then addStickerToSet, then setStickerPositionInSet
        /// </summary>
        public static Task<Ok> ReplaceStickerInSetAsync(
            this Client client, long userId = default, string name = default, InputFile oldSticker = default, InputSticker newSticker = default)
        {
            return client.ExecuteAsync(new ReplaceStickerInSet
            {
                UserId = userId, Name = name, OldSticker = oldSticker, NewSticker = newSticker
            });
        }
    }
}
// REUSE-IgnoreEnd