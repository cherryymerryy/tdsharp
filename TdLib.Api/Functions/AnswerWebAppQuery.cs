using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Sets the result of interaction with a Web App and sends corresponding message on behalf of the user to the chat from which the query originated; for bots only
        /// </summary>
        public class AnswerWebAppQuery : Function<SentWebAppMessage>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "answerWebAppQuery";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the Web App query
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("web_app_query_id")]
            public string WebAppQueryId { get; set; }

            /// <summary>
            /// The result of the query
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("result")]
            public InputInlineQueryResult Result { get; set; }
        }

        /// <summary>
        /// Sets the result of interaction with a Web App and sends corresponding message on behalf of the user to the chat from which the query originated; for bots only
        /// </summary>
        public static Task<SentWebAppMessage> AnswerWebAppQueryAsync(
            this Client client, string webAppQueryId = default, InputInlineQueryResult result = default)
        {
            return client.ExecuteAsync(new AnswerWebAppQuery
            {
                WebAppQueryId = webAppQueryId, Result = result
            });
        }
    }
}
// REUSE-IgnoreEnd