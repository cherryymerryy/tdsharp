using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Toggles whether a participant of an active group call is muted, unmuted, or allowed to unmute themselves
        /// </summary>
        public class ToggleGroupCallParticipantIsMuted : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "toggleGroupCallParticipantIsMuted";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Group call identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("group_call_id")]
            public int GroupCallId { get; set; }

            /// <summary>
            /// Participant identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("participant_id")]
            public MessageSender ParticipantId { get; set; }

            /// <summary>
            /// Pass true to mute the user; pass false to unmute them
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_muted")]
            public bool IsMuted { get; set; }
        }

        /// <summary>
        /// Toggles whether a participant of an active group call is muted, unmuted, or allowed to unmute themselves
        /// </summary>
        public static Task<Ok> ToggleGroupCallParticipantIsMutedAsync(
            this Client client, int groupCallId = default, MessageSender participantId = default, bool isMuted = default)
        {
            return client.ExecuteAsync(new ToggleGroupCallParticipantIsMuted
            {
                GroupCallId = groupCallId, ParticipantId = participantId, IsMuted = isMuted
            });
        }
    }
}
// REUSE-IgnoreEnd