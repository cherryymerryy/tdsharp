using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Changes imported contacts using the list of contacts saved on the device. Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts.
        /// Query result depends on the result of the previous query, so only one query is possible at the same time
        /// </summary>
        public class ChangeImportedContacts : Function<ImportedContacts>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "changeImportedContacts";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The new list of contacts, contact's vCard are ignored and are not imported
            /// </summary>
            [JsonProperty("contacts", ItemConverterType = typeof(Converter))]
            public Contact[] Contacts { get; set; }
        }

        /// <summary>
        /// Changes imported contacts using the list of contacts saved on the device. Imports newly added contacts and, if at least the file database is enabled, deletes recently deleted contacts.
        /// Query result depends on the result of the previous query, so only one query is possible at the same time
        /// </summary>
        public static Task<ImportedContacts> ChangeImportedContactsAsync(
            this Client client, Contact[] contacts = default)
        {
            return client.ExecuteAsync(new ChangeImportedContacts
            {
                Contacts = contacts
            });
        }
    }
}
// REUSE-IgnoreEnd