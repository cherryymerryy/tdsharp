using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns invite links for a chat created by specified administrator. Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to get other links
        /// </summary>
        public class GetChatInviteLinks : Function<ChatInviteLinks>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getChatInviteLinks";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Chat identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// User identifier of a chat administrator. Must be an identifier of the current user for non-owner
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("creator_user_id")]
            public long CreatorUserId { get; set; }

            /// <summary>
            /// Pass true if revoked links needs to be returned instead of active or expired
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_revoked")]
            public bool IsRevoked { get; set; }

            /// <summary>
            /// Creation date of an invite link starting after which to return invite links; use 0 to get results from the beginning
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset_date")]
            public int OffsetDate { get; set; }

            /// <summary>
            /// Invite link starting after which to return invite links; use empty string to get results from the beginning
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset_invite_link")]
            public string OffsetInviteLink { get; set; }

            /// <summary>
            /// The maximum number of invite links to return; up to 100
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }
        }

        /// <summary>
        /// Returns invite links for a chat created by specified administrator. Requires administrator privileges and can_invite_users right in the chat to get own links and owner privileges to get other links
        /// </summary>
        public static Task<ChatInviteLinks> GetChatInviteLinksAsync(
            this Client client, long chatId = default, long creatorUserId = default, bool isRevoked = default, int offsetDate = default, string offsetInviteLink = default, int limit = default)
        {
            return client.ExecuteAsync(new GetChatInviteLinks
            {
                ChatId = chatId, CreatorUserId = creatorUserId, IsRevoked = isRevoked, OffsetDate = offsetDate, OffsetInviteLink = offsetInviteLink, Limit = limit
            });
        }
    }
}
// REUSE-IgnoreEnd