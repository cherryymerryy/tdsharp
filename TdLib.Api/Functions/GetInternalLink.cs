using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns an HTTPS or a tg: link with the given type. Can be called before authorization
        /// </summary>
        public class GetInternalLink : Function<HttpUrl>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getInternalLink";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Expected type of the link
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("type")]
            public InternalLinkType Type { get; set; }

            /// <summary>
            /// Pass true to create an HTTPS link (only available for some link types); pass false to create a tg: link
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_http")]
            public bool IsHttp { get; set; }
        }

        /// <summary>
        /// Returns an HTTPS or a tg: link with the given type. Can be called before authorization
        /// </summary>
        public static Task<HttpUrl> GetInternalLinkAsync(
            this Client client, InternalLinkType type = default, bool isHttp = default)
        {
            return client.ExecuteAsync(new GetInternalLink
            {
                Type = type, IsHttp = isHttp
            });
        }
    }
}
// REUSE-IgnoreEnd