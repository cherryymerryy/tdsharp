using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Searches for files in the file download list or recently downloaded files from the list
        /// </summary>
        public class SearchFileDownloads : Function<FoundFileDownloads>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "searchFileDownloads";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Query to search for; may be empty to return all downloaded files
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("query")]
            public string Query { get; set; }

            /// <summary>
            /// Pass true to search only for active downloads, including paused
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("only_active")]
            public bool OnlyActive { get; set; }

            /// <summary>
            /// Pass true to search only for completed downloads
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("only_completed")]
            public bool OnlyCompleted { get; set; }

            /// <summary>
            /// Offset of the first entry to return as received from the previous request; use empty string to get the first chunk of results
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset")]
            public string Offset { get; set; }

            /// <summary>
            /// The maximum number of files to be returned
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }
        }

        /// <summary>
        /// Searches for files in the file download list or recently downloaded files from the list
        /// </summary>
        public static Task<FoundFileDownloads> SearchFileDownloadsAsync(
            this Client client, string query = default, bool onlyActive = default, bool onlyCompleted = default, string offset = default, int limit = default)
        {
            return client.ExecuteAsync(new SearchFileDownloads
            {
                Query = query, OnlyActive = onlyActive, OnlyCompleted = onlyCompleted, Offset = offset, Limit = limit
            });
        }
    }
}
// REUSE-IgnoreEnd