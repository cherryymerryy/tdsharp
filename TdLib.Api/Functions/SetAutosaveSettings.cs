using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Sets autosave settings for the given scope. The method is guaranteed to work only after at least one call to getAutosaveSettings
        /// </summary>
        public class SetAutosaveSettings : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "setAutosaveSettings";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Autosave settings scope
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("scope")]
            public AutosaveSettingsScope Scope { get; set; }

            /// <summary>
            /// New autosave settings for the scope; pass null to set autosave settings to default
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("settings")]
            public ScopeAutosaveSettings Settings { get; set; }
        }

        /// <summary>
        /// Sets autosave settings for the given scope. The method is guaranteed to work only after at least one call to getAutosaveSettings
        /// </summary>
        public static Task<Ok> SetAutosaveSettingsAsync(
            this Client client, AutosaveSettingsScope scope = default, ScopeAutosaveSettings settings = default)
        {
            return client.ExecuteAsync(new SetAutosaveSettings
            {
                Scope = scope, Settings = settings
            });
        }
    }
}
// REUSE-IgnoreEnd