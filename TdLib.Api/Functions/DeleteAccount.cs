using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Deletes the account of the current user, deleting all information associated with the user from the server. The phone number of the account can be used to create a new account.
        /// Can be called before authorization when the current authorization state is authorizationStateWaitPassword
        /// </summary>
        public class DeleteAccount : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "deleteAccount";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The reason why the account was deleted; optional
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reason")]
            public string Reason { get; set; }

            /// <summary>
            /// The 2-step verification password of the current user. If the current user isn't authorized, then an empty string can be passed and account deletion can be canceled within one week
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("password")]
            public string Password { get; set; }
        }

        /// <summary>
        /// Deletes the account of the current user, deleting all information associated with the user from the server. The phone number of the account can be used to create a new account.
        /// Can be called before authorization when the current authorization state is authorizationStateWaitPassword
        /// </summary>
        public static Task<Ok> DeleteAccountAsync(
            this Client client, string reason = default, string password = default)
        {
            return client.ExecuteAsync(new DeleteAccount
            {
                Reason = reason, Password = password
            });
        }
    }
}
// REUSE-IgnoreEnd