using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Reports a chat photo to the Telegram moderators. A chat photo can be reported only if chat.can_be_reported
        /// </summary>
        public class ReportChatPhoto : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "reportChatPhoto";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Chat identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifier of the photo to report. Only full photos from chatPhoto can be reported
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("file_id")]
            public int FileId { get; set; }

            /// <summary>
            /// The reason for reporting the chat photo
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reason")]
            public ReportReason Reason { get; set; }

            /// <summary>
            /// Additional report details; 0-1024 characters
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("text")]
            public string Text { get; set; }
        }

        /// <summary>
        /// Reports a chat photo to the Telegram moderators. A chat photo can be reported only if chat.can_be_reported
        /// </summary>
        public static Task<Ok> ReportChatPhotoAsync(
            this Client client, long chatId = default, int fileId = default, ReportReason reason = default, string text = default)
        {
            return client.ExecuteAsync(new ReportChatPhoto
            {
                ChatId = chatId, FileId = fileId, Reason = reason, Text = text
            });
        }
    }
}
// REUSE-IgnoreEnd