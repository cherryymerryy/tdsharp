using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Changes pause state of a file in the file download list
        /// </summary>
        public class ToggleDownloadIsPaused : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "toggleDownloadIsPaused";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the downloaded file
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("file_id")]
            public int FileId { get; set; }

            /// <summary>
            /// Pass true if the download is paused
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_paused")]
            public bool IsPaused { get; set; }
        }

        /// <summary>
        /// Changes pause state of a file in the file download list
        /// </summary>
        public static Task<Ok> ToggleDownloadIsPausedAsync(
            this Client client, int fileId = default, bool isPaused = default)
        {
            return client.ExecuteAsync(new ToggleDownloadIsPaused
            {
                FileId = fileId, IsPaused = isPaused
            });
        }
    }
}
// REUSE-IgnoreEnd