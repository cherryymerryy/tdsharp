using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Sets the result of an inline query; for bots only
        /// </summary>
        public class AnswerInlineQuery : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "answerInlineQuery";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the inline query
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("inline_query_id")]
            public long InlineQueryId { get; set; }

            /// <summary>
            /// Pass true if results may be cached and returned only for the user that sent the query. By default, results may be returned to any user who sends the same query
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_personal")]
            public bool IsPersonal { get; set; }

            /// <summary>
            /// Button to be shown above inline query results; pass null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("button")]
            public InlineQueryResultsButton Button { get; set; }

            /// <summary>
            /// The results of the query
            /// </summary>
            [JsonProperty("results", ItemConverterType = typeof(Converter))]
            public InputInlineQueryResult[] Results { get; set; }

            /// <summary>
            /// Allowed time to cache the results of the query, in seconds
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("cache_time")]
            public int CacheTime { get; set; }

            /// <summary>
            /// Offset for the next inline query; pass an empty string if there are no more results
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("next_offset")]
            public string NextOffset { get; set; }
        }

        /// <summary>
        /// Sets the result of an inline query; for bots only
        /// </summary>
        public static Task<Ok> AnswerInlineQueryAsync(
            this Client client, long inlineQueryId = default, bool isPersonal = default, InlineQueryResultsButton button = default, InputInlineQueryResult[] results = default, int cacheTime = default, string nextOffset = default)
        {
            return client.ExecuteAsync(new AnswerInlineQuery
            {
                InlineQueryId = inlineQueryId, IsPersonal = isPersonal, Button = button, Results = results, CacheTime = cacheTime, NextOffset = nextOffset
            });
        }
    }
}
// REUSE-IgnoreEnd