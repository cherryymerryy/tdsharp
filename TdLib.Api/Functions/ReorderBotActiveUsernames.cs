using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Changes order of active usernames of a bot. Can be called only if userTypeBot.can_be_edited == true
        /// </summary>
        public class ReorderBotActiveUsernames : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "reorderBotActiveUsernames";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the target bot
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("bot_user_id")]
            public long BotUserId { get; set; }

            /// <summary>
            /// The new order of active usernames. All currently active usernames must be specified
            /// </summary>
            [JsonProperty("usernames", ItemConverterType = typeof(Converter))]
            public string[] Usernames { get; set; }
        }

        /// <summary>
        /// Changes order of active usernames of a bot. Can be called only if userTypeBot.can_be_edited == true
        /// </summary>
        public static Task<Ok> ReorderBotActiveUsernamesAsync(
            this Client client, long botUserId = default, string[] usernames = default)
        {
            return client.ExecuteAsync(new ReorderBotActiveUsernames
            {
                BotUserId = botUserId, Usernames = usernames
            });
        }
    }
}
// REUSE-IgnoreEnd