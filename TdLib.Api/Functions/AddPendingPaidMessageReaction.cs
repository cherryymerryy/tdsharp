using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Adds the paid message reaction to a message. Use getMessageAvailableReactions to check whether the reaction is available for the message
        /// </summary>
        public class AddPendingPaidMessageReaction : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "addPendingPaidMessageReaction";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the chat to which the message belongs
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifier of the message
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// Number of Telegram Stars to be used for the reaction. The total number of pending paid reactions must not exceed getOption("paid_reaction_star_count_max")
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("star_count")]
            public long StarCount { get; set; }

            /// <summary>
            /// Pass true if the user didn't choose anonymity explicitly, for example, the reaction is set from the message bubble
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("use_default_is_anonymous")]
            public bool UseDefaultIsAnonymous { get; set; }

            /// <summary>
            /// Pass true to make paid reaction of the user on the message anonymous; pass false to make the user's profile visible among top reactors. Ignored if use_default_is_anonymous == true
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_anonymous")]
            public bool IsAnonymous { get; set; }
        }

        /// <summary>
        /// Adds the paid message reaction to a message. Use getMessageAvailableReactions to check whether the reaction is available for the message
        /// </summary>
        public static Task<Ok> AddPendingPaidMessageReactionAsync(
            this Client client, long chatId = default, long messageId = default, long starCount = default, bool useDefaultIsAnonymous = default, bool isAnonymous = default)
        {
            return client.ExecuteAsync(new AddPendingPaidMessageReaction
            {
                ChatId = chatId, MessageId = messageId, StarCount = starCount, UseDefaultIsAnonymous = useDefaultIsAnonymous, IsAnonymous = isAnonymous
            });
        }
    }
}
// REUSE-IgnoreEnd