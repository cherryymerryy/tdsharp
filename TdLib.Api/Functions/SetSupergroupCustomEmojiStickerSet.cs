using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Changes the custom emoji sticker set of a supergroup; requires can_change_info administrator right. The chat must have at least chatBoostFeatures.min_custom_emoji_sticker_set_boost_level boost level to pass the corresponding color
        /// </summary>
        public class SetSupergroupCustomEmojiStickerSet : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "setSupergroupCustomEmojiStickerSet";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the supergroup
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("supergroup_id")]
            public long SupergroupId { get; set; }

            /// <summary>
            /// New value of the custom emoji sticker set identifier for the supergroup. Use 0 to remove the custom emoji sticker set in the supergroup
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("custom_emoji_sticker_set_id")]
            public long CustomEmojiStickerSetId { get; set; }
        }

        /// <summary>
        /// Changes the custom emoji sticker set of a supergroup; requires can_change_info administrator right. The chat must have at least chatBoostFeatures.min_custom_emoji_sticker_set_boost_level boost level to pass the corresponding color
        /// </summary>
        public static Task<Ok> SetSupergroupCustomEmojiStickerSetAsync(
            this Client client, long supergroupId = default, long customEmojiStickerSetId = default)
        {
            return client.ExecuteAsync(new SetSupergroupCustomEmojiStickerSet
            {
                SupergroupId = supergroupId, CustomEmojiStickerSetId = customEmojiStickerSetId
            });
        }
    }
}
// REUSE-IgnoreEnd