using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns file downloaded prefix size from a given offset, in bytes
        /// </summary>
        public class GetFileDownloadedPrefixSize : Function<FileDownloadedPrefixSize>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getFileDownloadedPrefixSize";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the file
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("file_id")]
            public int FileId { get; set; }

            /// <summary>
            /// Offset from which downloaded prefix size needs to be calculated
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset")]
            public long Offset { get; set; }
        }

        /// <summary>
        /// Returns file downloaded prefix size from a given offset, in bytes
        /// </summary>
        public static Task<FileDownloadedPrefixSize> GetFileDownloadedPrefixSizeAsync(
            this Client client, int fileId = default, long offset = default)
        {
            return client.ExecuteAsync(new GetFileDownloadedPrefixSize
            {
                FileId = fileId, Offset = offset
            });
        }
    }
}
// REUSE-IgnoreEnd