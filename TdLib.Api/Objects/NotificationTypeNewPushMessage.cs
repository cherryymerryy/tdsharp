using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class NotificationType : Object
        {
            /// <summary>
            /// New message was received through a push notification
            /// </summary>
            public class NotificationTypeNewPushMessage : NotificationType
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "notificationTypeNewPushMessage";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// The message identifier. The message will not be available in the chat history, but the identifier can be used in viewMessages, or as a message to be replied in the same chat
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("message_id")]
                public long MessageId { get; set; }

                /// <summary>
                /// Identifier of the sender of the message. Corresponding user or chat may be inaccessible
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("sender_id")]
                public MessageSender SenderId { get; set; }

                /// <summary>
                /// Name of the sender
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("sender_name")]
                public string SenderName { get; set; }

                /// <summary>
                /// True, if the message is outgoing
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("is_outgoing")]
                public bool IsOutgoing { get; set; }

                /// <summary>
                /// Push message content
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("content")]
                public PushMessageContent Content { get; set; }
            }
        }
    }
}
// REUSE-IgnoreEnd