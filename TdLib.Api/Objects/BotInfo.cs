using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Contains information about a bot
        /// </summary>
        public partial class BotInfo : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "botInfo";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The text that is shown on the bot's profile page and is sent together with the link when users share the bot
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("short_description")]
            public string ShortDescription { get; set; }

            /// <summary>
            /// 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("description")]
            public string Description { get; set; }

            /// <summary>
            /// Photo shown in the chat with the bot if the chat is empty; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("photo")]
            public Photo Photo { get; set; }

            /// <summary>
            /// Animation shown in the chat with the bot if the chat is empty; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("animation")]
            public Animation Animation { get; set; }

            /// <summary>
            /// Information about a button to show instead of the bot commands menu button; may be null if ordinary bot commands menu must be shown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("menu_button")]
            public BotMenuButton MenuButton { get; set; }

            /// <summary>
            /// List of the bot commands
            /// </summary>
            [JsonProperty("commands", ItemConverterType = typeof(Converter))]
            public BotCommand[] Commands { get; set; }

            /// <summary>
            /// Default administrator rights for adding the bot to basic group and supergroup chats; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("default_group_administrator_rights")]
            public ChatAdministratorRights DefaultGroupAdministratorRights { get; set; }

            /// <summary>
            /// Default administrator rights for adding the bot to channels; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("default_channel_administrator_rights")]
            public ChatAdministratorRights DefaultChannelAdministratorRights { get; set; }

            /// <summary>
            /// The internal link, which can be used to edit bot commands; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("edit_commands_link")]
            public InternalLinkType EditCommandsLink { get; set; }

            /// <summary>
            /// The internal link, which can be used to edit bot description; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("edit_description_link")]
            public InternalLinkType EditDescriptionLink { get; set; }

            /// <summary>
            /// The internal link, which can be used to edit the photo or animation shown in the chat with the bot if the chat is empty; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("edit_description_media_link")]
            public InternalLinkType EditDescriptionMediaLink { get; set; }

            /// <summary>
            /// The internal link, which can be used to edit bot settings; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("edit_settings_link")]
            public InternalLinkType EditSettingsLink { get; set; }
        }
    }
}
// REUSE-IgnoreEnd