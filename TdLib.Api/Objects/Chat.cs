using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// A chat. (Can be a private chat, basic group, supergroup, or secret chat)
        /// </summary>
        public partial class Chat : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "chat";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Chat unique identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("id")]
            public long Id { get; set; }

            /// <summary>
            /// Type of the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("type")]
            public ChatType Type { get; set; }

            /// <summary>
            /// Chat title
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("title")]
            public string Title { get; set; }

            /// <summary>
            /// Chat photo; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("photo")]
            public ChatPhotoInfo Photo { get; set; }

            /// <summary>
            /// Identifier of the accent color for message sender name, and backgrounds of chat photo, reply header, and link preview
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("accent_color_id")]
            public int AccentColorId { get; set; }

            /// <summary>
            /// Identifier of a custom emoji to be shown on the reply header and link preview background for messages sent by the chat; 0 if none
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("background_custom_emoji_id")]
            public long BackgroundCustomEmojiId { get; set; }

            /// <summary>
            /// Identifier of the profile accent color for the chat's profile; -1 if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("profile_accent_color_id")]
            public int ProfileAccentColorId { get; set; }

            /// <summary>
            /// Identifier of a custom emoji to be shown on the background of the chat's profile; 0 if none
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("profile_background_custom_emoji_id")]
            public long ProfileBackgroundCustomEmojiId { get; set; }

            /// <summary>
            /// Actions that non-administrator chat members are allowed to take in the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("permissions")]
            public ChatPermissions Permissions { get; set; }

            /// <summary>
            /// Last message in the chat; may be null if none or unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("last_message")]
            public Message LastMessage { get; set; }

            /// <summary>
            /// Positions of the chat in chat lists
            /// </summary>
            [JsonProperty("positions", ItemConverterType = typeof(Converter))]
            public ChatPosition[] Positions { get; set; }

            /// <summary>
            /// Chat lists to which the chat belongs. A chat can have a non-zero position in a chat list even it doesn't belong to the chat list and have no position in a chat list even it belongs to the chat list
            /// </summary>
            [JsonProperty("chat_lists", ItemConverterType = typeof(Converter))]
            public ChatList[] ChatLists { get; set; }

            /// <summary>
            /// Identifier of a user or chat that is selected to send messages in the chat; may be null if the user can't change message sender
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_sender_id")]
            public MessageSender MessageSenderId { get; set; }

            /// <summary>
            /// Block list to which the chat is added; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("block_list")]
            public BlockList BlockList { get; set; }

            /// <summary>
            /// True, if chat content can't be saved locally, forwarded, or copied
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_protected_content")]
            public bool HasProtectedContent { get; set; }

            /// <summary>
            /// True, if translation of all messages in the chat must be suggested to the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_translatable")]
            public bool IsTranslatable { get; set; }

            /// <summary>
            /// True, if the chat is marked as unread
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_marked_as_unread")]
            public bool IsMarkedAsUnread { get; set; }

            /// <summary>
            /// True, if the chat is a forum supergroup that must be shown in the "View as topics" mode, or Saved Messages chat that must be shown in the "View as chats"
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("view_as_topics")]
            public bool ViewAsTopics { get; set; }

            /// <summary>
            /// True, if the chat has scheduled messages
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_scheduled_messages")]
            public bool HasScheduledMessages { get; set; }

            /// <summary>
            /// True, if the chat messages can be deleted only for the current user while other users will continue to see the messages
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_deleted_only_for_self")]
            public bool CanBeDeletedOnlyForSelf { get; set; }

            /// <summary>
            /// True, if the chat messages can be deleted for all users
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_deleted_for_all_users")]
            public bool CanBeDeletedForAllUsers { get; set; }

            /// <summary>
            /// True, if the chat can be reported to Telegram moderators through reportChat or reportChatPhoto
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_reported")]
            public bool CanBeReported { get; set; }

            /// <summary>
            /// Default value of the disable_notification parameter, used when a message is sent to the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("default_disable_notification")]
            public bool DefaultDisableNotification { get; set; }

            /// <summary>
            /// Number of unread messages in the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("unread_count")]
            public int UnreadCount { get; set; }

            /// <summary>
            /// Identifier of the last read incoming message
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("last_read_inbox_message_id")]
            public long LastReadInboxMessageId { get; set; }

            /// <summary>
            /// Identifier of the last read outgoing message
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("last_read_outbox_message_id")]
            public long LastReadOutboxMessageId { get; set; }

            /// <summary>
            /// Number of unread messages with a mention/reply in the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("unread_mention_count")]
            public int UnreadMentionCount { get; set; }

            /// <summary>
            /// Number of messages with unread reactions in the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("unread_reaction_count")]
            public int UnreadReactionCount { get; set; }

            /// <summary>
            /// Notification settings for the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("notification_settings")]
            public ChatNotificationSettings NotificationSettings { get; set; }

            /// <summary>
            /// Types of reaction, available in the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("available_reactions")]
            public ChatAvailableReactions AvailableReactions { get; set; }

            /// <summary>
            /// Current message auto-delete or self-destruct timer setting for the chat, in seconds; 0 if disabled. Self-destruct timer in secret chats starts after the message or its content is viewed. Auto-delete timer in other chats starts from the send date
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_auto_delete_time")]
            public int MessageAutoDeleteTime { get; set; }

            /// <summary>
            /// Emoji status to be shown along with chat title; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("emoji_status")]
            public EmojiStatus EmojiStatus { get; set; }

            /// <summary>
            /// Background set for the chat; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("background")]
            public ChatBackground Background { get; set; }

            /// <summary>
            /// If non-empty, name of a theme, set for the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("theme_name")]
            public string ThemeName { get; set; }

            /// <summary>
            /// Information about actions which must be possible to do through the chat action bar; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("action_bar")]
            public ChatActionBar ActionBar { get; set; }

            /// <summary>
            /// Information about bar for managing a business bot in the chat; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("business_bot_manage_bar")]
            public BusinessBotManageBar BusinessBotManageBar { get; set; }

            /// <summary>
            /// Information about video chat of the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("video_chat")]
            public VideoChat VideoChat { get; set; }

            /// <summary>
            /// Information about pending join requests; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("pending_join_requests")]
            public ChatJoinRequestsInfo PendingJoinRequests { get; set; }

            /// <summary>
            /// Identifier of the message from which reply markup needs to be used; 0 if there is no default custom reply markup in the chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("reply_markup_message_id")]
            public long ReplyMarkupMessageId { get; set; }

            /// <summary>
            /// A draft of a message in the chat; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("draft_message")]
            public DraftMessage DraftMessage { get; set; }

            /// <summary>
            /// Application-specific data associated with the chat. (For example, the chat scroll position or local chat notification settings can be stored here.) Persistent if the message database is used
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("client_data")]
            public string ClientData { get; set; }
        }
    }
}
// REUSE-IgnoreEnd