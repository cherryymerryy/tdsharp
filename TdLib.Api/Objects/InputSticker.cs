using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// A sticker to be added to a sticker set
        /// </summary>
        public partial class InputSticker : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "inputSticker";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// File with the sticker; must fit in a 512x512 square. For WEBP stickers the file must be in WEBP or PNG format, which will be converted to WEBP server-side.
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sticker")]
            public InputFile Sticker { get; set; }

            /// <summary>
            /// Format of the sticker
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("format")]
            public StickerFormat Format { get; set; }

            /// <summary>
            /// String with 1-20 emoji corresponding to the sticker
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("emojis")]
            public string Emojis { get; set; }

            /// <summary>
            /// Position where the mask is placed; pass null if not specified
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("mask_position")]
            public MaskPosition MaskPosition { get; set; }

            /// <summary>
            /// List of up to 20 keywords with total length up to 64 characters, which can be used to find the sticker
            /// </summary>
            [JsonProperty("keywords", ItemConverterType = typeof(Converter))]
            public string[] Keywords { get; set; }
        }
    }
}
// REUSE-IgnoreEnd