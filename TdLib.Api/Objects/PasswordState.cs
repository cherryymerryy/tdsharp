using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Represents the current state of 2-step verification
        /// </summary>
        public partial class PasswordState : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "passwordState";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// True, if a 2-step verification password is set
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_password")]
            public bool HasPassword { get; set; }

            /// <summary>
            /// Hint for the password; may be empty
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("password_hint")]
            public string PasswordHint { get; set; }

            /// <summary>
            /// True, if a recovery email is set
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_recovery_email_address")]
            public bool HasRecoveryEmailAddress { get; set; }

            /// <summary>
            /// True, if some Telegram Passport elements were saved
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_passport_data")]
            public bool HasPassportData { get; set; }

            /// <summary>
            /// Information about the recovery email address to which the confirmation email was sent; may be null
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("recovery_email_address_code_info")]
            public EmailAddressAuthenticationCodeInfo RecoveryEmailAddressCodeInfo { get; set; }

            /// <summary>
            /// Pattern of the email address set up for logging in
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("login_email_address_pattern")]
            public string LoginEmailAddressPattern { get; set; }

            /// <summary>
            /// If not 0, point in time (Unix timestamp) after which the 2-step verification password can be reset immediately using resetPassword
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("pending_reset_date")]
            public int PendingResetDate { get; set; }
        }
    }
}
// REUSE-IgnoreEnd