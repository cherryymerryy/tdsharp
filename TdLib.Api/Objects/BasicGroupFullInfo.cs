using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Contains full information about a basic group
        /// </summary>
        public partial class BasicGroupFullInfo : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "basicGroupFullInfo";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Chat photo; may be null if empty or unknown. If non-null, then it is the same photo as in chat.photo
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("photo")]
            public ChatPhoto Photo { get; set; }

            /// <summary>
            /// 
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("description")]
            public string Description { get; set; }

            /// <summary>
            /// User identifier of the creator of the group; 0 if unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("creator_user_id")]
            public long CreatorUserId { get; set; }

            /// <summary>
            /// Group members
            /// </summary>
            [JsonProperty("members", ItemConverterType = typeof(Converter))]
            public ChatMember[] Members { get; set; }

            /// <summary>
            /// True, if non-administrators and non-bots can be hidden in responses to getSupergroupMembers and searchChatMembers for non-administrators after upgrading the basic group to a supergroup
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_hide_members")]
            public bool CanHideMembers { get; set; }

            /// <summary>
            /// True, if aggressive anti-spam checks can be enabled or disabled in the supergroup after upgrading the basic group to a supergroup
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_toggle_aggressive_anti_spam")]
            public bool CanToggleAggressiveAntiSpam { get; set; }

            /// <summary>
            /// Primary invite link for this group; may be null. For chat administrators with can_invite_users right only. Updated only after the basic group is opened
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("invite_link")]
            public ChatInviteLink InviteLink { get; set; }

            /// <summary>
            /// List of commands of bots in the group
            /// </summary>
            [JsonProperty("bot_commands", ItemConverterType = typeof(Converter))]
            public BotCommands[] BotCommands { get; set; }
        }
    }
}
// REUSE-IgnoreEnd