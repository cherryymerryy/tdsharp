using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Describes a poll
        /// </summary>
        public partial class Poll : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "poll";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Unique poll identifier
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("id")]
            public long Id { get; set; }

            /// <summary>
            /// Poll question; 1-300 characters. Only custom emoji entities are allowed
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("question")]
            public FormattedText Question { get; set; }

            /// <summary>
            /// List of poll answer options
            /// </summary>
            [JsonProperty("options", ItemConverterType = typeof(Converter))]
            public PollOption[] Options { get; set; }

            /// <summary>
            /// Total number of voters, participating in the poll
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("total_voter_count")]
            public int TotalVoterCount { get; set; }

            /// <summary>
            /// Identifiers of recent voters, if the poll is non-anonymous
            /// </summary>
            [JsonProperty("recent_voter_ids", ItemConverterType = typeof(Converter))]
            public MessageSender[] RecentVoterIds { get; set; }

            /// <summary>
            /// True, if the poll is anonymous
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_anonymous")]
            public bool IsAnonymous { get; set; }

            /// <summary>
            /// Type of the poll
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("type")]
            public PollType Type { get; set; }

            /// <summary>
            /// Amount of time the poll will be active after creation, in seconds
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("open_period")]
            public int OpenPeriod { get; set; }

            /// <summary>
            /// Point in time (Unix timestamp) when the poll will automatically be closed
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("close_date")]
            public int CloseDate { get; set; }

            /// <summary>
            /// True, if the poll is closed
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_closed")]
            public bool IsClosed { get; set; }
        }
    }
}
// REUSE-IgnoreEnd