using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Contains information about the last message from which a new message was forwarded last time
        /// </summary>
        public partial class ForwardSource : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "forwardSource";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the chat to which the message that was forwarded belonged; may be 0 if unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Identifier of the message; may be 0 if unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_id")]
            public long MessageId { get; set; }

            /// <summary>
            /// Identifier of the sender of the message; may be null if unknown or the new message was forwarded not to Saved Messages
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sender_id")]
            public MessageSender SenderId { get; set; }

            /// <summary>
            /// Name of the sender of the message if the sender is hidden by their privacy settings
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sender_name")]
            public string SenderName { get; set; }

            /// <summary>
            /// Point in time (Unix timestamp) when the message is sent; 0 if unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("date")]
            public int Date { get; set; }

            /// <summary>
            /// True, if the message that was forwarded is outgoing; always false if sender is unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_outgoing")]
            public bool IsOutgoing { get; set; }
        }
    }
}
// REUSE-IgnoreEnd